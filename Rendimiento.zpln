{
  "paragraphs": [
    {
      "text": "//Adnan Bouaouda Arafa, Sept. 2021, UMA\r\nimport org.apache.flink.api.scala._\r\nimport org.apache.flink.api.scala.utils._\r\nimport org.apache.flink.util.Collector\r\nimport javax.script._\r\nimport scala.annotation.tailrec\r\nimport scalaz._\r\nimport Scalaz._\r\n/**\r\n * Implements the \"eLTL\" logic\r\n */\r\n\r\ntype T // use \"override type\" so specify the type in the user module\r\ndef memoizeFnc[K, V](f: K => V): K => V = {\r\nval cache = collection.mutable.Map.empty[K, V]\r\n    k =>\r\n        cache.getOrElse(k, {\r\n        cache update(k, f(k))\r\n        cache(k)\r\n        })\r\n}\r\n\r\ndef apply[T](b: DataSet[(Long, T)], cond: T => Boolean): DataSet[(Long, Boolean)] \r\n        =  b.map{ e => (e._1, cond(e._2))}\r\nval mApply = Memo.immutableHashMapMemo{apply _ tupled}\r\n\r\ndef parse[T](b: DataSet[(Long, T)], cond: T => Boolean): List[Long]\r\n    = { lazy val lazy_b = apply(b, cond).filter{_._2}.map { pair => pair._1 }.collect.toList\r\n        lazy_b\r\n    }\r\n            \r\ndef intervalPQ(lp: List[Long], lq: List[Long],  ti: Long = 0, tf: Long = Long.MaxValue): List[(Long, Long)] = {\r\ntry{    \r\n    @tailrec def tIntervslPQ(Lp: List[Long], Lq: List[Long], acc: List[(Long, Long)] = List.empty[(Long, Long)]):List[(Long, Long)] = {\r\n        val  Lqq = Lq.dropWhile(_ <= Lp.head)\r\n        val  Lpp = Lp.dropWhile(_ <= Lqq.head)\r\n        (Lpp, Lqq) match {\r\n            case (List(), _) => acc ++ List((Lp.head, Lqq.head))\r\n            case (_, List()) => acc ++ List((Lp.head, Lqq.head))\r\n            case (_, _)   => tIntervslPQ(Lpp, Lqq.tail, acc ++ List((Lp.head, Lqq.head)))\r\n        }\r\n}\r\n    val  lpp = lp.sortWith(_ < _) filter (e => e >= ti  && e<= lq.max)\r\n    val  lqq = lq.sortWith(_ < _) filter (e => e >= ti  && e<= tf)\r\n    tIntervslPQ(lpp, lqq)\r\n}catch{case e: Exception => List.empty[(Long, Long)]}\r\n} \r\nval mIntervalPQ = Memo.immutableHashMapMemo{intervalPQ _ tupled}\r\ndef intervalP(lp: List[Long],  ti: Long = 0, tf: Long = Long.MaxValue): List[(Long, Long)]={\r\n    val lpp = lp.sortWith(_ < _) filter (e => e >= ti  && e<= tf)\r\n    lpp zip lpp}\r\nval mIntervalP  = Memo.immutableHashMapMemo{intervalP _ tupled}\r\ndef intervals[T](b: DataSet[(Long, T)], p: T => Boolean, q: T => Boolean = null, ti: Long = 0, tf: Long = Long.MaxValue)\r\n=  q match{\r\n        case null => mIntervalP(parse(b,p), ti, tf)\r\n        case _    => mIntervalPQ(parse(b,p), parse(b,q), ti, tf)\r\n    }\r\ndef bPQ[T](b: DataSet[(Long, T)], i: List[(Long, Long)])\r\n= i.map(e => b.filter(x => (x._1 >= e._1) && (x._1 <= e._2)))\r\ndef Phi[T](b: DataSet[(Long, T)], ti: Long = 0, tf: Long = Long.MaxValue): Boolean = ???\r\ndef True[T](b: DataSet[(Long, T)], ti: Long = 0, tf: Long = Long.MaxValue): Boolean = true\r\ndef PhiAll[T](p: T => Boolean)(b: DataSet[(Long, T)], ti: Long, tf: Long): Boolean = {\r\n        val bb = b.filter(e => (e._1 >= ti) && (e._1 <= tf))\r\n        bb.map(e => p(e._2)).collect.forall(_ == true)\r\n}\r\ndef PhiK[T](K: Long)(p: T => Boolean, q: T => Boolean = null)\r\n    = {(b: DataSet[(Long, T)], ti: Long, tf: Long) \r\n    => intervals(b, p, q, ti, tf).map(e => (e._2 - e._1 >= K)).\r\n    reduceOption(_ || _).getOrElse(false)}\r\ndef Neg[T](F: (DataSet[(Long, T)], Long, Long) => Boolean)\r\n    ={(b: DataSet[(Long, T)], ti: Long, tf: Long) => !F(b, ti, tf)}\r\ndef Or[T](F1: (DataSet[(Long, T)], Long, Long) => Boolean, \r\n        F2: (DataSet[(Long, T)], Long, Long) => Boolean)\r\n    = {(b: DataSet[(Long, T)], ti: Long, tf: Long) \r\n    => F1(b, ti, tf) || F2(b, ti, tf)}  \r\ndef U[T](p: T => Boolean, q: T => Boolean = null)\r\n    (F1: (DataSet[(Long, T)], Long, Long) => Boolean,\r\n    F2: (DataSet[(Long, T)], Long, Long) => Boolean)\r\n    = {(b: DataSet[(Long, T)], ti: Long, tf: Long)\r\n    => intervals(b, p, q, ti, tf).map(e => F1(b, ti, e._1) && F2(b, e._1, e._2)).\r\n    reduceOption(_ || _).getOrElse(false)}                                 \r\ndef E[T](p: T => Boolean, q: T => Boolean = null)\r\n    (F: (DataSet[(Long, T)], Long, Long) => Boolean)\r\n    = {(b: DataSet[(Long, T)], ti: Long, tf: Long) \r\n    =>  val I = intervals(b, p, q, ti, tf); I.map(e => F(b, e._1, e._2)).\r\n    reduceOption(_ || _).getOrElse(false)}\r\ndef E2[T](p: T => Boolean, q: T => Boolean = null)\r\n        (F: (DataSet[(Long, T)], Long, Long) => Boolean)  = U(p, q)(True, F)\r\ndef A[T](p: T => Boolean, q: T => Boolean = {(e: T) => true})\r\n        (F: (DataSet[(Long, T)], Long, Long) => Boolean)\r\n    = {(b: DataSet[(Long, T)], ti: Long, tf: Long)\r\n    =>  val I = intervals(b, p, q, ti, tf); I.map(e => F(b, e._1, e._2)).\r\n        reduceOption(_ && _).getOrElse(false)}\r\ndef A2[T](p: T => Boolean, q: T => Boolean = null)\r\n        (F: (DataSet[(Long, T)], Long, Long) => Boolean)  = Neg(E(p, q)(Neg(F)))\r\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-03T04:41:54+0200",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.flink.api.scala._\nimport org.apache.flink.api.scala.utils._\nimport org.apache.flink.util.Collector\nimport javax.script._\nimport scala.annotation.tailrec\nimport scalaz._\nimport Scalaz._\ndefined type alias T\n\u001b[1m\u001b[34mmemoizeFnc\u001b[0m: \u001b[1m\u001b[32m[K, V](f: K => V)K => V\u001b[0m\n\u001b[1m\u001b[34mapply\u001b[0m: \u001b[1m\u001b[32m[T](b: org.apache.flink.api.scala.DataSet[(Long, T)], cond: T => Boolean)org.apache.flink.api.scala.DataSet[(Long, Boolean)]\u001b[0m\n\u001b[33mwarning: \u001b[0mthere was one feature warning; re-run with -feature for details\n\u001b[1m\u001b[34mmApply\u001b[0m: \u001b[1m\u001b[32m((org.apache.flink.api.scala.DataSet[(Long, Nothing)], Nothing => Boolean)) => org.apache.flink.api.scala.DataSet[(Long, Boolean)]\u001b[0m = scalaz.Memo$$$Lambda$398/668111228@e0b4370\n\u001b[1m\u001b[34mparse\u001b[0m: \u001b[1m\u001b[32m[T](b: org.apache.flink.api.scala.DataSet[(Long, T)], cond: T => Boolean)List[Long]\u001b[0m\n\u001b[1m\u001b[34mintervalPQ\u001b[0m: \u001b[1m\u001b[32m(lp: List[Long], lq: List[Long], ti: Long, tf: Long)List[(Long, Long)]\u001b[0m\n\u001b[33mwarning: \u001b[0mthere was one feature warning; re-run with -feature for details\n\u001b[1m\u001b[34mmIntervalPQ\u001b[0m: \u001b[1m\u001b[32m((List[Long], List[Long], Long, Long)) => List[(Long, Long)]\u001b[0m = scalaz.Memo$$$Lambda$398/668111228@41a2ab69\n\u001b[1m\u001b[34mintervalP\u001b[0m: \u001b[1m\u001b[32m(lp: List[Long], ti: Long, tf: Long)List[(Long, Long)]\u001b[0m\n\u001b[33mwarning: \u001b[0mthere was one feature warning; re-run with -feature for details\n\u001b[1m\u001b[34mmIntervalP\u001b[0m: \u001b[1m\u001b[32m((List[Long], Long, Long)) => List[(Long, Long)]\u001b[0m = scalaz.Memo$$$Lambda$398/668111228@3fd0cbc4\n\u001b[1m\u001b[34mintervals\u001b[0m: \u001b[1m\u001b[32m[T](b: org.apache.flink.api.scala.DataSet[(Long, T)], p: T => Boolean, q: T => Boolean, ti: Long, tf: Long)List[(Long, Long)]\u001b[0m\n\u001b[1m\u001b[34mbPQ\u001b[0m: \u001b[1m\u001b[32m[T](b: org.apache.flink.api.scala.DataSet[(Long, T)], i: List[(Long, Long)])List[org.apache.flink.api.scala.DataSet[(Long, T)]]\u001b[0m\n\u001b[1m\u001b[34mPhi\u001b[0m: \u001b[1m\u001b[32m[T](b: org.apache.flink.api.scala.DataSet[(Long, T)], ti: Long, tf: Long)Boolean\u001b[0m\n\u001b[1m\u001b[34mTrue\u001b[0m: \u001b[1m\u001b[32m[T](b: org.apache.flink.api.scala.DataSet[(Long, T)], ti: Long, tf: Long)Boolean\u001b[0m\n\u001b[1m\u001b[34mPhiAll\u001b[0m: \u001b[1m\u001b[32m[T](p: T => Boolean)(b: org.apache.flink.api.scala.DataSet[(Long, T)], ti: Long, tf: Long)Boolean\u001b[0m\n\u001b[1m\u001b[34mPhiK\u001b[0m: \u001b[1m\u001b[32m[T](K: Long)(p: T => Boolean, q: T => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mNeg\u001b[0m: \u001b[1m\u001b[32m[T](F: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mOr\u001b[0m: \u001b[1m\u001b[32m[T](F1: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean, F2: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mU\u001b[0m: \u001b[1m\u001b[32m[T](p: T => Boolean, q: T => Boolean)(F1: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean, F2: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mE\u001b[0m: \u001b[1m\u001b[32m[T](p: T => Boolean, q: T => Boolean)(F: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mE2\u001b[0m: \u001b[1m\u001b[32m[T](p: T => Boolean, q: T => Boolean)(F: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mA\u001b[0m: \u001b[1m\u001b[32m[T](p: T => Boolean, q: T => Boolean)(F: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n\u001b[1m\u001b[34mA2\u001b[0m: \u001b[1m\u001b[32m[T](p: T => Boolean, q: T => Boolean)(F: (org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean)(org.apache.flink.api.scala.DataSet[(Long, T)], Long, Long) => Boolean\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1633228017931_1156158017",
      "id": "paragraph_1633228017931_1156158017",
      "dateCreated": "2021-10-03T04:26:57+0200",
      "dateStarted": "2021-10-03T04:41:54+0200",
      "dateFinished": "2021-10-03T04:42:17+0200",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:13924"
    },
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1633229313609_1291640996",
      "id": "paragraph_1633229313609_1291640996",
      "dateCreated": "2021-10-03T04:48:33+0200",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:14529",
      "text": "%sh\ncat ./csv/10.csv",
      "dateUpdated": "2021-10-03T04:49:22+0200",
      "dateFinished": "2021-10-03T04:49:22+0200",
      "dateStarted": "2021-10-03T04:49:22+0200",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1;1\r\n2;0\r\n3;0\r\n4;0\r\n5;2\r\n6;0\r\n7;0\r\n8;0\r\n9;0\r\n10;3\r\n"
          }
        ]
      }
    },
    {
      "text": "type T = (Long, Int)\r\ntype TT = Int\r\nval path = os.pwd / \"csv\"\r\n\r\nval _10      = benv.readCsvFile[T](path+\"/10.csv\", fieldDelimiter = \";\")\r\n\r\ndef Start: (TT => Boolean) = (e: TT) => {e == 1}\r\ndef Stop : (TT => Boolean) = (e: TT) => {e == 3}\r\ndef Cond : (TT => Boolean) = (e: TT) => {e == 2}\r\n\r\nprintln(A(Start, Stop) (E(Cond) (True)) (_10, 0, Long.MaxValue))",
      "user": "anonymous",
      "dateUpdated": "2021-10-03T04:49:30+0200",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined type alias T\ndefined type alias TT\n\u001b[1m\u001b[34mpath\u001b[0m: \u001b[1m\u001b[32mos.pwd.ThisType\u001b[0m = /home/adnan/csv\n\u001b[1m\u001b[34m_10\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.api.scala.DataSet[T]\u001b[0m = org.apache.flink.api.scala.DataSet@60b63627\n\u001b[1m\u001b[34mStart\u001b[0m: \u001b[1m\u001b[32mTT => Boolean\u001b[0m\n\u001b[1m\u001b[34mStop\u001b[0m: \u001b[1m\u001b[32mTT => Boolean\u001b[0m\n\u001b[1m\u001b[34mCond\u001b[0m: \u001b[1m\u001b[32mTT => Boolean\u001b[0m\ntrue\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "FLINK JOB",
          "tooltip": "View in Flink web UI",
          "group": "flink",
          "values": [
            {
              "jobUrl": "http://localhost:8081#/job/e9275e6ec0764e1bf783e33cf642c91a",
              "$$hashKey": "object:14751"
            },
            {
              "jobUrl": "http://localhost:8081#/job/13bbdf743591c2d86499df8016149bd8",
              "$$hashKey": "object:14752"
            },
            {
              "jobUrl": "http://localhost:8081#/job/3ad1e10035be1aba1fc5a964ae5c62aa",
              "$$hashKey": "object:14753"
            }
          ],
          "interpreterSettingId": "flink"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1633228105112_1421594792",
      "id": "paragraph_1633228105112_1421594792",
      "dateCreated": "2021-10-03T04:28:25+0200",
      "dateStarted": "2021-10-03T04:49:30+0200",
      "dateFinished": "2021-10-03T04:49:34+0200",
      "status": "FINISHED",
      "$$hashKey": "object:13925"
    },
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1633228337641_759422926",
      "id": "paragraph_1633228337641_759422926",
      "dateCreated": "2021-10-03T04:32:17+0200",
      "status": "READY",
      "$$hashKey": "object:13926"
    }
  ],
  "name": "Rendimiento",
  "id": "2GJPARVGP",
  "defaultInterpreterGroup": "flink",
  "version": "0.9.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Rendimiento"
}